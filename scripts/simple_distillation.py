#!/usr/bin/env python3
"""
Simple Knowledge Distillation Runner
Compresses multiple MD files into a unified development path
"""

import os
import glob
from pathlib import Path
from datetime import datetime

def discover_md_files():
    """Find all context harmonization MD files"""
    workspace = Path("c:/dev/AIOS")
    
    patterns = [
        "*STATUS*.md",
        "*EVOLUTION*.md", 
        "*CONTEXT*.md",
        "*PROTOCOL*.md",
        "*ROADMAP*.md",
        "*GUIDE*.md",
        "*OPTIMIZATION*.md",
        "*SUMMARY*.md",
        "*REORGANIZATION*.md",
        "*UNIFIED*.md",
        "*INTEGRATION*.md",
        "*MAGNUS*.md"
    ]
    
    found_files = []
    for pattern in patterns:
        found_files.extend(workspace.glob(pattern))
    
    # Remove duplicates
    unique_files = list(set(found_files))
    unique_files.sort()
    
    return unique_files

def extract_key_info(file_path):
    """Extract key information from an MD file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        lines = content.split('\n')
        key_info = {
            'filename': file_path.name,
            'priorities': [],
            'status_items': [],
            'tasks': []
        }
        
        for line in lines:
            line_clean = line.strip()
            
            # Look for priorities
            if any(word in line_clean.lower() for word in ['critical', 'urgent', 'immediate', 'priority']):
                key_info['priorities'].append(line_clean)
            
            # Look for status indicators
            if any(symbol in line_clean for symbol in ['✅', '❌', '⚠️']) or any(word in line_clean.lower() for word in ['completed', 'operational', 'pending']):
                key_info['status_items'].append(line_clean)
            
            # Look for tasks
            if line_clean.startswith(('- ', '* ', '1. ', '2. ', '3. ')) and any(word in line_clean.lower() for word in ['implement', 'create', 'build', 'fix', 'optimize']):
                key_info['tasks'].append(line_clean)
        
        return key_info
        
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return None

def generate_distilled_document(all_info):
    """Generate the unified development path document"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    doc = f"""# AIOS Distilled Development Path
*Generated: {timestamp} by Knowledge Distillation Engine*

## 🎯 Mission
Develop a self-evolving, consciousness-simulating AI operating system with recursive improvement capabilities.

## 🔥 Critical Priorities
"""
    
    # Collect and deduplicate priorities
    all_priorities = []
    for info in all_info:
        if info:
            all_priorities.extend(info['priorities'])
    
    unique_priorities = list(set(all_priorities))[:10]
    
    for i, priority in enumerate(unique_priorities, 1):
        clean_priority = priority.strip('- *#').strip()
        if len(clean_priority) > 5:
            doc += f"{i}. {clean_priority}\n"
    
    doc += """
## 📋 System Status
"""
    
    # Collect status items
    all_status = []
    for info in all_info:
        if info:
            all_status.extend(info['status_items'])
    
    unique_status = list(set(all_status))[:15]
    
    for status in unique_status:
        clean_status = status.strip()
        if len(clean_status) > 5:
            doc += f"- {clean_status}\n"
    
    doc += """
## 🚀 Action Items
"""
    
    # Collect tasks
    all_tasks = []
    for info in all_info:
        if info:
            all_tasks.extend(info['tasks'])
    
    unique_tasks = list(set(all_tasks))[:20]
    
    for task in unique_tasks:
        clean_task = task.strip()
        if len(clean_task) > 5:
            doc += f"{clean_task}\n"
    
    doc += f"""
## 📚 Source Files
This document distilled knowledge from {len([i for i in all_info if i])} files:
"""
    
    for info in all_info:
        if info:
            doc += f"- {info['filename']}\n"
    
    doc += """
---
*Generated by AIOS Knowledge Distillation Engine*
*This replaces multiple scattered context files with a single unified reference*
"""
    
    return doc

def main():
    print("🧬 AIOS Simple Knowledge Distillation Engine")
    print("=" * 50)
    
    # Step 1: Discover files
    files = discover_md_files()
    print(f"📚 Found {len(files)} MD files to distill")
    
    for file in files:
        print(f"  • {file.name}")
    
    # Step 2: Extract key information
    print(f"\n🔍 Extracting key information...")
    all_info = []
    for file in files:
        info = extract_key_info(file)
        all_info.append(info)
        if info:
            print(f"  ✅ Processed: {file.name}")
    
    # Step 3: Generate distilled document
    print(f"\n✨ Generating distilled document...")
    distilled_content = generate_distilled_document(all_info)
    
    # Step 4: Save
    output_path = Path("c:/dev/AIOS/DISTILLED_DEVELOPMENT_PATH.md")
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(distilled_content)
    
    print(f"\n🎉 Distillation Complete!")
    print(f"📄 Generated: {output_path}")
    print(f"📏 Length: {len(distilled_content)} characters")
    print(f"🗜️ Compression: {len(files)} files → 1 unified document")

if __name__ == "__main__":
    main()
